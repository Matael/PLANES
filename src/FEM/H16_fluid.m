% H16_fluid.m%% Copyright (C) 2014 < Olivier DAZEL <olivier.dazel@univ-lemans.fr> >%% This file is part of PLANES.%% PLANES (Porous LAum NumErical Simulator) is a software to compute the% vibroacoustic response of sound packages containing coupled% acoustic/elastic/porous substructures. It is mainly based on the% Finite-Element Method and some numerical methods developped at% LAUM (http://laum.univ-lemans.fr).%% You can download the latest version of PLANES at% https://github.com/OlivierDAZEL/PLANES% or find more details on Olivier's webpage% http://perso.univ-lemans.fr/~odazel/%% For any questions or if you want to% contribute to this project, contact Olivier.%% PLANES is free software: you can redistribute it and/or modify% it under the terms of the GNU General Public License as published by% the Free Software Foundation, either version 3 of the License, or% (at your option) any later version.%% This program is distributed in the hope that it will be useful,% but WITHOUT ANY WARRANTY; without even the implied warranty of% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the% GNU General Public License for more details.%% You should have received a copy of the GNU General Public License% along with this program. If not, see <http://www.gnu.org/licenses/>.%%function [vh,vq] = H16_fluid(lx,ly)vh=zeros(16,16);vq=zeros(16,16);Psi_1_x=[1 0/lx -3/lx/lx  2/lx/lx/lx];Psi_2_x=[0 1/lx -2/lx/lx  1/lx/lx/lx];Psi_3_x=[0 0/lx -1/lx/lx  1/lx/lx/lx];Psi_4_x=[0 0/lx  3/lx/lx -2/lx/lx/lx];Psi_1_y=[1 0/ly -3/ly/ly  2/ly/ly/ly];Psi_2_y=[0 1/ly -2/ly/ly  1/ly/ly/ly];Psi_3_y=[0 0/ly -1/ly/ly  1/ly/ly/ly];Psi_4_y=[0 0/ly  3/ly/ly -2/ly/ly/ly];Psi_11=multiply_polynom_2D(Psi_1_x,Psi_1_y');Psi_12=multiply_polynom_2D(Psi_1_x,Psi_2_y');Psi_13=multiply_polynom_2D(Psi_1_x,Psi_3_y');Psi_14=multiply_polynom_2D(Psi_1_x,Psi_4_y');Psi_21=multiply_polynom_2D(Psi_2_x,Psi_1_y');Psi_22=multiply_polynom_2D(Psi_2_x,Psi_2_y');Psi_23=multiply_polynom_2D(Psi_2_x,Psi_3_y');Psi_24=multiply_polynom_2D(Psi_2_x,Psi_4_y');Psi_31=multiply_polynom_2D(Psi_3_x,Psi_1_y');Psi_32=multiply_polynom_2D(Psi_3_x,Psi_2_y');Psi_33=multiply_polynom_2D(Psi_3_x,Psi_3_y');Psi_34=multiply_polynom_2D(Psi_3_x,Psi_4_y');Psi_41=multiply_polynom_2D(Psi_4_x,Psi_1_y');Psi_42=multiply_polynom_2D(Psi_4_x,Psi_2_y');Psi_43=multiply_polynom_2D(Psi_4_x,Psi_3_y');Psi_44=multiply_polynom_2D(Psi_4_x,Psi_4_y');for i_test=1:4    for j_test=1:4        for i_champs=1:4            for j_champs=1:4                                eval(['pq=multiply_polynom_2D(Psi_',num2str(i_test),num2str(j_test),',Psi_',num2str(i_champs),num2str(j_champs) ');'])                eval(['vq(expand_Hermite(',num2str(i_test),',',num2str(j_test),'),expand_Hermite(',num2str(i_champs),',',num2str(j_champs),'))=integrate_polynom_2D(pq,lx,ly);';]);                                eval(['pxqx=multiply_polynom_2D(derive_polynom_2D_x(Psi_',num2str(i_test),num2str(j_test),'),derive_polynom_2D_x(Psi_',num2str(i_champs),num2str(j_champs) '));']);                eval(['pyqy=multiply_polynom_2D(derive_polynom_2D_y(Psi_',num2str(i_test),num2str(j_test),'),derive_polynom_2D_y(Psi_',num2str(i_champs),num2str(j_champs) '));']);                eval(['vh(expand_Hermite(',num2str(i_test),',',num2str(j_test),'),expand_Hermite(',num2str(i_champs),',',num2str(j_champs),'))=integrate_polynom_2D(pxqx,lx,ly)+integrate_polynom_2D(pyqy,lx,ly);';]);                                     end        end    endend